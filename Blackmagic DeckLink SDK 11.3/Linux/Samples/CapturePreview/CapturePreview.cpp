/* -LICENSE-START-
** Copyright (c) 2018 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#include <QMessageBox>
#include "CapturePreview.h"
#include "ui_CapturePreview.h"

// Video input connector map 
const QVector<QPair<BMDVideoConnection, QString>> kVideoInputConnections =
{
	qMakePair(bmdVideoConnectionSDI,		QString("SDI")),
	qMakePair(bmdVideoConnectionHDMI,		QString("HDMI")),
	qMakePair(bmdVideoConnectionOpticalSDI,	QString("Optical SDI")),
	qMakePair(bmdVideoConnectionComponent,	QString("Component")),
	qMakePair(bmdVideoConnectionComposite,	QString("Composite")),
	qMakePair(bmdVideoConnectionSVideo,		QString("S-Video")),
};


CapturePreview::CapturePreview(QWidget *parent) :
	QDialog(parent), ui(new Ui::CapturePreviewDialog),
	m_selectedDevice(nullptr), m_deckLinkDiscovery(nullptr),
	m_profileCallback(nullptr), m_selectedInputConnection(bmdVideoConnectionUnspecified)
{
	ui->setupUi(this);

	layout = new QGridLayout(ui->previewContainer);
	layout->setMargin(0);

	m_previewView = new DeckLinkOpenGLWidget(this);
	m_previewView->resize(ui->previewContainer->size());
	m_previewView->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
	layout->addWidget(m_previewView, 0, 0, 0, 0);
	m_previewView->DrawFrame(nullptr);

	m_ancillaryDataTable = new AncillaryDataTable(this);
	ui->ancillaryTableView->setModel(m_ancillaryDataTable);
	ui->ancillaryTableView->horizontalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);
	ui->ancillaryTableView->horizontalHeader()->setStretchLastSection(true);

	ui->invalidSignalLabel->setVisible(false);

	connect(ui->startButton, SIGNAL(clicked()), this, SLOT(ToggleStart()));
	connect(ui->inputDevicePopup, SIGNAL(currentIndexChanged(int)), this, SLOT(InputDeviceChanged(int)));
	QObject::connect(ui->inputConnectionPopup, SIGNAL(currentIndexChanged(int)), this, SLOT(InputConnectionChanged(int)));
	EnableInterface(false);
	show();
}

CapturePreview::~CapturePreview()
{
	if (m_previewView != nullptr)
	{
		m_previewView->Release();
		m_previewView = nullptr;
	}

	if (m_profileCallback != nullptr)
	{
		m_profileCallback->Release();
		m_profileCallback = nullptr;
	}

	if (m_deckLinkDiscovery != nullptr)
	{
		m_deckLinkDiscovery->Release();
		m_deckLinkDiscovery = nullptr;
	}

	while (ui->inputDevicePopup->count() > 0)
	{
		DeckLinkInputDevice* deckLinkInputDevice = (DeckLinkInputDevice*)(((QVariant)ui->inputDevicePopup->itemData(0)).value<void*>());
		deckLinkInputDevice->Release();
		deckLinkInputDevice = nullptr;
		ui->inputDevicePopup->removeItem(0);
	}

	delete ui;
}

void CapturePreview::setup()
{
	// Create and initialise DeckLink device discovery and profile objects
	m_deckLinkDiscovery = new DeckLinkDeviceDiscovery(this);
	m_profileCallback = new ProfileCallback(this);

	if ((m_deckLinkDiscovery != nullptr) && (m_profileCallback != nullptr))
	{
		if (!m_deckLinkDiscovery->enable())
		{
			QMessageBox::critical(this, "This application requires the DeckLink drivers installed.", "Please install the Blackmagic DeckLink drivers to use the features of this application.");
		}
	}
}

void CapturePreview::customEvent(QEvent *event)
{
	if (event->type() == kAddDeviceEvent)
	{
		DeckLinkDeviceDiscoveryEvent* discoveryEvent = dynamic_cast<DeckLinkDeviceDiscoveryEvent*>(event);
		AddDevice(discoveryEvent->DeckLink());
	}
	else if (event->type() == kRemoveDeviceEvent)
	{
		DeckLinkDeviceDiscoveryEvent* discoveryEvent = dynamic_cast<DeckLinkDeviceDiscoveryEvent*>(event);
		RemoveDevice(discoveryEvent->DeckLink());
	}
	else if (event->type() == kVideoFormatChangedEvent)
	{
		DeckLinkInputFormatChangedEvent* formatEvent = dynamic_cast<DeckLinkInputFormatChangedEvent*>(event);
		VideoFormatChanged(formatEvent->DisplayMode());
	}
	else if (event->type() == kVideoFrameArrivedEvent)
	{
		DeckLinkInputFrameArrivedEvent* frameArrivedEvent = dynamic_cast<DeckLinkInputFrameArrivedEvent*>(event);
		ui->invalidSignalLabel->setVisible(!frameArrivedEvent->SignalValid());
		m_ancillaryDataTable->UpdateFrameData(frameArrivedEvent->AncillaryData(), frameArrivedEvent->Metadata());
		delete frameArrivedEvent->AncillaryData();
		delete frameArrivedEvent->Metadata();
	}
	else if (event->type() == kProfileActivatedEvent)
	{
		DeckLinkProfileCallbackEvent* profileChangedEvent = dynamic_cast<DeckLinkProfileCallbackEvent*>(event);
		UpdateProfile(profileChangedEvent->Profile());
	}
}

void CapturePreview::closeEvent(QCloseEvent *)
{
	if (m_selectedDevice != nullptr)
	{
		// Stop capturing
		if (m_selectedDevice->IsCapturing())
			StopCapture();

		// Disable profile callback
		if (m_selectedDevice->GetProfileManager() != nullptr)
			m_selectedDevice->GetProfileManager()->SetCallback(nullptr);
	}

	// Disable DeckLink device discovery
	m_deckLinkDiscovery->disable();
}

void CapturePreview::ToggleStart()
{
	if (m_selectedDevice == nullptr)
		return;
	
	if (!m_selectedDevice->IsCapturing())
		StartCapture();
	else
		StopCapture();
}

void CapturePreview::StartCapture()
{
	BMDDisplayMode displayMode = bmdModeUnknown;
	bool applyDetectedInputMode = ui->autoDetectCheckBox->isChecked();

	QVariant v = ui->videoFormatPopup->itemData(ui->videoFormatPopup->currentIndex());
	displayMode = (BMDDisplayMode)v.value<unsigned int>();

	if (m_selectedDevice && 
		m_selectedDevice->StartCapture(displayMode, m_previewView, applyDetectedInputMode))
	{
		// Update UI
		ui->startButton->setText("Stop");
		EnableInterface(false);
	}
}

void CapturePreview::StopCapture()
{
	if (m_selectedDevice)
		m_selectedDevice->StopCapture();

	// Update UI
	ui->invalidSignalLabel->setVisible(false);
	ui->startButton->setText("Start");
	EnableInterface(true);
}

void CapturePreview::EnableInterface(bool enable)
{
	// Set the enable state of capture preview properties elements
	for (auto& combobox : ui->propertiesGroupBox->findChildren<QComboBox*>())
	{
		combobox->setEnabled(enable);
	}
	ui->autoDetectCheckBox->setEnabled(enable);
}

void CapturePreview::RefreshInputConnectionMenu(void)
{
	BMDVideoConnection		supportedConnections;
	int64_t					currentInputConnection;

	// Get the available input video connections for the device
	supportedConnections = m_selectedDevice->GetVideoConnections();
	
	// Get the current selected input connection
	if (m_selectedDevice->GetDeckLinkConfiguration()->GetInt(bmdDeckLinkConfigVideoInputConnection, &currentInputConnection) != S_OK)
	{
		currentInputConnection = bmdVideoConnectionUnspecified;
	}

	ui->inputConnectionPopup->clear();

	for (auto& inputConnection : kVideoInputConnections)
	{
		if (inputConnection.first & supportedConnections)
			ui->inputConnectionPopup->addItem(inputConnection.second, QVariant::fromValue((int64_t)inputConnection.first));

		if (inputConnection.first == (BMDVideoConnection)currentInputConnection)
			ui->inputConnectionPopup->setCurrentIndex(ui->inputConnectionPopup->count() - 1);
	}
}

void CapturePreview::RefreshDisplayModeMenu(void)
{
	IDeckLinkDisplayModeIterator*	displayModeIterator;
	IDeckLinkDisplayMode*			displayMode;
	IDeckLinkInput*					deckLinkInput;

	ui->videoFormatPopup->clear();
	
	deckLinkInput = m_selectedDevice->GetDeckLinkInput();
	
	if (deckLinkInput->GetDisplayModeIterator(&displayModeIterator) != S_OK)
		return;

	// Populate the display mode menu with a list of display modes supported by the installed DeckLink card
	while (displayModeIterator->Next(&displayMode) == S_OK)
	{
		char*					modeName;
		bool					supported = false;
		BMDDisplayMode			mode = displayMode->GetDisplayMode();
		
		if ((deckLinkInput->DoesSupportVideoMode(m_selectedInputConnection, mode, bmdFormatUnspecified, bmdSupportedVideoModeDefault, &supported) == S_OK)
			&& supported)
		{
			if (displayMode->GetName(const_cast<const char**>(&modeName)) == S_OK)
			{
				ui->videoFormatPopup->addItem(QString(modeName), QVariant::fromValue((uint64_t)mode));
				free(modeName);
			}
		}
		
		displayMode->Release();
		displayMode = nullptr;
	}
	displayModeIterator->Release();

	ui->videoFormatPopup->setCurrentIndex(0);
	ui->startButton->setEnabled(ui->videoFormatPopup->count() != 0);
}

void CapturePreview::AddDevice(IDeckLink* deckLink)
{
	DeckLinkInputDevice* newDevice = new DeckLinkInputDevice(this, deckLink);

	// Initialise new DeckLinkDevice object
	if (!newDevice->Init())
	{
		// Device does not have IDeckLinkInput interface, eg it is a DeckLink Mini Monitor
		newDevice->Release();
		return;
	}

	// Add this DeckLink input device to the device list
	ui->inputDevicePopup->addItem(newDevice->GetDeviceName(), QVariant::fromValue((void*)newDevice));

	if (ui->inputDevicePopup->count() == 1)
	{
		// We have added our first item, refresh and enable UI
		ui->inputDevicePopup->setCurrentIndex(0);
		InputDeviceChanged(0);

		ui->startButton->setText("Start");
		EnableInterface(true);
	}
}

void CapturePreview::RemoveDevice(IDeckLink* deckLink)
{
	int deviceIndex = -1; 
	DeckLinkInputDevice* deviceToRemove = nullptr;

	// Find the combo box entry to remove .
	for (deviceIndex = 0; deviceIndex < ui->inputDevicePopup->count(); ++deviceIndex)
	{
		DeckLinkInputDevice* inputDevice = (DeckLinkInputDevice*)(((QVariant)ui->inputDevicePopup->itemData(deviceIndex)).value<void*>());
		if (inputDevice->GetDeckLinkInstance() == deckLink)
		{
			deviceToRemove = inputDevice;
			break;
		}
	}

	if (deviceToRemove == nullptr)
		return;

	// Remove device from list
	ui->inputDevicePopup->removeItem(deviceIndex);

	// If playback is ongoing, stop it
	if ((m_selectedDevice == deviceToRemove) && m_selectedDevice->IsCapturing())
		m_selectedDevice->StopCapture();

	// Check how many devices are left
	if (ui->inputDevicePopup->count() == 0)
	{
		// We have removed the last device, disable the interface.
		EnableInterface(false);

		m_selectedDevice = nullptr;
	}
	else if (m_selectedDevice == deviceToRemove)
	{
		// The device that was removed was the one selected in the UI.
		// Select the first available device in the list and reset the UI.
		ui->inputDevicePopup->setCurrentIndex(0);
		InputDeviceChanged(0);
	}

	// Release DeckLinkDevice instance
	deviceToRemove->Release();
}

void CapturePreview::VideoFormatChanged(BMDDisplayMode newDisplayMode)
{
	// Update videoFormatPopup with auto-detected display mode
	for (int i = 0; i < ui->videoFormatPopup->count(); ++i)
	{
		if (((QVariant)ui->videoFormatPopup->itemData(i)).value<BMDDisplayMode>() == newDisplayMode)
		{
			ui->videoFormatPopup->setCurrentIndex(i);
			return;
		}
	}
}

void CapturePreview::HaltStreams(void)
{
	// Profile is changing, stop capture if running
	if ((m_selectedDevice != nullptr) && m_selectedDevice->IsCapturing())
		StopCapture();
}

void CapturePreview::UpdateProfile(IDeckLinkProfile* /* newProfile */)
{
	// Action as if new device selected to check whether device is active/inactive
	// This will subsequently update input connections and video modes combo boxes
	InputDeviceChanged(ui->inputDevicePopup->currentIndex());
}

void CapturePreview::InputDeviceChanged(int selectedDeviceIndex)
{
	if (selectedDeviceIndex == -1)
		return;

	// Disable profile callback for previous selected device
	if ((m_selectedDevice != nullptr) && (m_selectedDevice->GetProfileManager() != nullptr))
		m_selectedDevice->GetProfileManager()->SetCallback(nullptr);

	QVariant selectedDeviceVariant = ui->inputDevicePopup->itemData(selectedDeviceIndex);
	
	m_selectedDevice = (DeckLinkInputDevice*)(selectedDeviceVariant.value<void*>());

	// Register profile callback with newly selected device's profile manager
	if (m_selectedDevice != nullptr)
	{
		IDeckLinkProfileAttributes*		deckLinkAttributes = nullptr;

		if (m_selectedDevice->GetProfileManager() != nullptr)
			m_selectedDevice->GetProfileManager()->SetCallback(m_profileCallback);

		// Query duplex mode attribute to check whether sub-device is active
		if (m_selectedDevice->GetDeckLinkInstance()->QueryInterface(IID_IDeckLinkProfileAttributes, (void**)&deckLinkAttributes) == S_OK)
		{
			int64_t		duplexMode;

			if ((deckLinkAttributes->GetInt(BMDDeckLinkDuplex, &duplexMode) == S_OK) &&
					(duplexMode != bmdDuplexInactive))
			{
				// Update the input connector popup menu
				RefreshInputConnectionMenu();

				ui->autoDetectCheckBox->setEnabled(m_selectedDevice->SupportsFormatDetection());
				ui->autoDetectCheckBox->setChecked(m_selectedDevice->SupportsFormatDetection());
			}
			else
			{
				ui->inputConnectionPopup->clear();
				ui->videoFormatPopup->clear();
				ui->autoDetectCheckBox->setCheckState(Qt::Unchecked);
				ui->autoDetectCheckBox->setEnabled(false);
				ui->startButton->setEnabled(false);
			}

			deckLinkAttributes->Release();
		}
	}
}

void CapturePreview::InputConnectionChanged(int selectedConnectionIndex)
{
	HRESULT result;

	if (selectedConnectionIndex == -1)
		return;

	QVariant selectedConnectionVariant = ui->inputConnectionPopup->itemData(selectedConnectionIndex);
	m_selectedInputConnection = selectedConnectionVariant.value<BMDVideoConnection>();

	result = m_selectedDevice->GetDeckLinkConfiguration()->SetInt(bmdDeckLinkConfigVideoInputConnection, (int64_t)m_selectedInputConnection);
	if (result != S_OK)
	{
		QMessageBox::critical(this, "Input connection error", "Unable to set video input connector");
	}
	
	// Update the video mode popup menu
	RefreshDisplayModeMenu();
}

