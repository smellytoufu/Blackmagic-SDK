/* -LICENSE-START-
** Copyright (c) 2018 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#pragma once

#include <QEvent>
#include <QMainWindow>
#include <QWidget>

#include "DeckLinkInputDevice.h"
#include "DeckLinkDeviceDiscovery.h"
#include "DeckLinkOpenGLWidget.h"
#include "AncillaryDataTable.h"
#include "ProfileCallback.h"

#include "ui_CapturePreview.h"

// Define custom event type
static const QEvent::Type kAddDeviceEvent			= static_cast<QEvent::Type>(QEvent::User + 1);
static const QEvent::Type kRemoveDeviceEvent		= static_cast<QEvent::Type>(QEvent::User + 2);
static const QEvent::Type kVideoFormatChangedEvent	= static_cast<QEvent::Type>(QEvent::User + 3);
static const QEvent::Type kVideoFrameArrivedEvent	= static_cast<QEvent::Type>(QEvent::User + 4);
static const QEvent::Type kProfileActivatedEvent	= static_cast<QEvent::Type>(QEvent::User + 5);


// Forward declarations
class DeckLinkDeviceDiscovery;
class DeckLinkInputDevice;
class ProfileCallback;

class CapturePreview : public QDialog
{
	Q_OBJECT

public:
	explicit CapturePreview(QWidget *parent = 0);
	virtual ~CapturePreview();

	void customEvent(QEvent* event);
	void closeEvent(QCloseEvent *event);

	void setup();
	void EnableInterface(bool);

	void StartCapture();
	void StopCapture();
	
	void RefreshDisplayModeMenu(void);
	void RefreshInputConnectionMenu(void);
	void AddDevice(IDeckLink* deckLink);
	void RemoveDevice(IDeckLink* deckLink);
	void VideoFormatChanged(BMDDisplayMode newDisplayMode);
	void HaltStreams(void);
	void UpdateProfile(IDeckLinkProfile* newProfile);

private:
	Ui::CapturePreviewDialog*		ui;
	QGridLayout*					layout;

	DeckLinkInputDevice*			m_selectedDevice;
	DeckLinkDeviceDiscovery*		m_deckLinkDiscovery;
	DeckLinkOpenGLWidget*			m_previewView;
	ProfileCallback*				m_profileCallback;
	AncillaryDataTable*				m_ancillaryDataTable;
	BMDVideoConnection				m_selectedInputConnection;

public slots:
	void InputDeviceChanged(int selectedDeviceIndex);
	void InputConnectionChanged(int selectedConnectionIndex);
	void ToggleStart();
};
