/* -LICENSE-START-
** Copyright (c) 2018 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#pragma once

#include <QString>
#include "DeckLinkAPI.h"
#include "CapturePreview.h"
#include "AncillaryDataTable.h"

// Forward declarations
class CapturePreview;

class DeckLinkInputDevice : public IDeckLinkInputCallback
{
private:

	CapturePreview*				m_uiDelegate;
	QAtomicInt					m_refCount;
	//
	QString						m_deviceName;
	IDeckLink*					m_deckLink;
	IDeckLinkInput*				m_deckLinkInput;
	IDeckLinkConfiguration*		m_deckLinkConfig;
	IDeckLinkHDMIInputEDID*		m_deckLinkHDMIInputEDID;
	IDeckLinkProfileManager*	m_deckLinkProfileManager;

	bool						m_supportsFormatDetection;
	bool						m_currentlyCapturing;
	bool						m_applyDetectedInputMode;
	int64_t						m_supportedInputConnections;
	//
	static void					GetAncillaryDataFromFrame(IDeckLinkVideoInputFrame* frame, BMDTimecodeFormat format, QString* timecodeString, QString* userBitsString);
	static void					GetMetadataFromFrame(IDeckLinkVideoInputFrame* videoFrame, MetadataStruct* metadata);

public:
	DeckLinkInputDevice(CapturePreview* owner, IDeckLink* deckLink);
	virtual ~DeckLinkInputDevice();

	bool						Init();
	const QString&				GetDeviceName(void) const { return m_deviceName; }
	bool						IsCapturing(void) const { return m_currentlyCapturing; }
	bool						SupportsFormatDetection() const { return m_supportsFormatDetection; }
	BMDVideoConnection			GetVideoConnections() const { return (BMDVideoConnection) m_supportedInputConnections; }

	bool						StartCapture(BMDDisplayMode displayMode, IDeckLinkScreenPreviewCallback* screenPreviewCallback, bool applyDetectedInputMode);
	void						StopCapture(void);

	IDeckLink*					GetDeckLinkInstance() { return m_deckLink; }
	IDeckLinkInput*				GetDeckLinkInput() { return m_deckLinkInput; }
	IDeckLinkConfiguration*		GetDeckLinkConfiguration() { return m_deckLinkConfig; }
	IDeckLinkProfileManager*	GetProfileManager() { return m_deckLinkProfileManager; }

	// IUnknown interface
	virtual HRESULT		QueryInterface (REFIID iid, LPVOID *ppv);
	virtual ULONG		AddRef ();
	virtual ULONG		Release ();

	// IDeckLinkInputCallback interface
	virtual HRESULT		VideoInputFormatChanged(BMDVideoInputFormatChangedEvents notificationEvents, IDeckLinkDisplayMode *newDisplayMode, BMDDetectedVideoInputFormatFlags detectedSignalFlags);
	virtual HRESULT		VideoInputFrameArrived(IDeckLinkVideoInputFrame* videoFrame, IDeckLinkAudioInputPacket* audioPacket);
};

class DeckLinkInputFormatChangedEvent : public QEvent
{
private:
	BMDDisplayMode m_displayMode;

public:
	DeckLinkInputFormatChangedEvent(BMDDisplayMode displayMode);
	virtual ~DeckLinkInputFormatChangedEvent() {}

	BMDDisplayMode DisplayMode() const { return m_displayMode; }
};

class DeckLinkInputFrameArrivedEvent : public QEvent
{
private:
	AncillaryDataStruct*	m_ancillaryData;
	MetadataStruct*			m_metadata;
	bool					m_signalValid;

public:
	DeckLinkInputFrameArrivedEvent(AncillaryDataStruct* ancillaryData, MetadataStruct* metadata, bool signalValid);
	virtual ~DeckLinkInputFrameArrivedEvent() {}

	AncillaryDataStruct*	AncillaryData(void) const { return m_ancillaryData; }
	MetadataStruct*			Metadata(void) const { return m_metadata; }
	bool					SignalValid(void) const { return m_signalValid; }
};

