/* -LICENSE-START-
** Copyright (c) 2018 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#include "DeckLinkOpenGLWidget.h"

DeckLinkOpenGLWidget::DeckLinkOpenGLWidget(QWidget* parent) 
	: QOpenGLWidget(parent), m_refCount(1)
{
	m_deckLinkScreenPreviewHelper = CreateOpenGLScreenPreviewHelper();
}

DeckLinkOpenGLWidget::~DeckLinkOpenGLWidget()
{
	if (m_deckLinkScreenPreviewHelper != nullptr)
	{
		m_deckLinkScreenPreviewHelper->Release();
		m_deckLinkScreenPreviewHelper = nullptr;
	}
}

/// IUnknown methods

HRESULT DeckLinkOpenGLWidget::QueryInterface(REFIID, LPVOID *ppv)
{
	*ppv = NULL;
	return E_NOINTERFACE;
}

ULONG DeckLinkOpenGLWidget::AddRef ()
{
	return (ULONG) m_refCount.fetchAndAddAcquire(1);
}

ULONG DeckLinkOpenGLWidget::Release()
{
	ULONG newRefValue = (ULONG) m_refCount.fetchAndAddAcquire(-1);
	if (newRefValue == 0)
	{
		delete this;
		return 0;
	}

	return newRefValue;
}

/// IDeckLinkScreenPreviewCallback methods

HRESULT DeckLinkOpenGLWidget::DrawFrame(IDeckLinkVideoFrame* theFrame)
{
	if (m_deckLinkScreenPreviewHelper != nullptr)
	{
		m_deckLinkScreenPreviewHelper->SetFrame(theFrame);
		update();
	}
	return S_OK;
}

/// QOpenGLWidget methods

void DeckLinkOpenGLWidget::initializeGL()
{
	if (m_deckLinkScreenPreviewHelper != nullptr)
	{
		m_mutex.lock();
			m_deckLinkScreenPreviewHelper->InitializeGL();
		m_mutex.unlock();
	}
}

void DeckLinkOpenGLWidget::paintGL()
{
	m_mutex.lock();
		glLoadIdentity();

		glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
		glClear(GL_COLOR_BUFFER_BIT);

		m_deckLinkScreenPreviewHelper->PaintGL();
	m_mutex.unlock();
}

void DeckLinkOpenGLWidget::resizeGL(int width, int height)
{
	m_mutex.lock();
		glViewport(0, 0, width, height);
	m_mutex.unlock();
}
